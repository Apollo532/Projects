{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3228623,"sourceType":"datasetVersion","datasetId":1957837}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"source":"<a href=\"https://www.kaggle.com/code/amaan5h/flight-price-prediction?scriptVersionId=192532534\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-13T16:12:46.273922Z","iopub.execute_input":"2024-08-13T16:12:46.274339Z","iopub.status.idle":"2024-08-13T16:12:46.283369Z","shell.execute_reply.started":"2024-08-13T16:12:46.274308Z","shell.execute_reply":"2024-08-13T16:12:46.28195Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"import matplotlib.pyplot as plt\nimport seaborn as sns\nimport sklearn","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:12:46.285832Z","iopub.execute_input":"2024-08-13T16:12:46.286206Z","iopub.status.idle":"2024-08-13T16:12:46.295987Z","shell.execute_reply.started":"2024-08-13T16:12:46.286177Z","shell.execute_reply":"2024-08-13T16:12:46.294474Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = pd.read_csv('/kaggle/input/flight-price-prediction/Clean_Dataset.csv')\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:12:46.297514Z","iopub.execute_input":"2024-08-13T16:12:46.297898Z","iopub.status.idle":"2024-08-13T16:12:46.762234Z","shell.execute_reply.started":"2024-08-13T16:12:46.297867Z","shell.execute_reply":"2024-08-13T16:12:46.76105Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.describe(), df.info()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:12:46.764987Z","iopub.execute_input":"2024-08-13T16:12:46.765456Z","iopub.status.idle":"2024-08-13T16:12:46.929424Z","shell.execute_reply.started":"2024-08-13T16:12:46.765415Z","shell.execute_reply":"2024-08-13T16:12:46.9284Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['source_city'].value_counts(), df['destination_city'].value_counts()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:12:46.930778Z","iopub.execute_input":"2024-08-13T16:12:46.931089Z","iopub.status.idle":"2024-08-13T16:12:46.981266Z","shell.execute_reply.started":"2024-08-13T16:12:46.931062Z","shell.execute_reply":"2024-08-13T16:12:46.980092Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df = df.drop(['Unnamed: 0', 'flight'], axis = 1)\n\ndf['class'] = df['class'].apply(lambda x: 1 if x == 'Business' else '0')\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:12:46.982765Z","iopub.execute_input":"2024-08-13T16:12:46.983283Z","iopub.status.idle":"2024-08-13T16:12:47.070072Z","shell.execute_reply.started":"2024-08-13T16:12:46.983242Z","shell.execute_reply":"2024-08-13T16:12:47.068872Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:12:47.071278Z","iopub.execute_input":"2024-08-13T16:12:47.071595Z","iopub.status.idle":"2024-08-13T16:12:47.086394Z","shell.execute_reply.started":"2024-08-13T16:12:47.071567Z","shell.execute_reply":"2024-08-13T16:12:47.085305Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df['stops'] = pd.factorize(df['stops'])[0]","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:12:47.087912Z","iopub.execute_input":"2024-08-13T16:12:47.088356Z","iopub.status.idle":"2024-08-13T16:12:47.117108Z","shell.execute_reply.started":"2024-08-13T16:12:47.088317Z","shell.execute_reply":"2024-08-13T16:12:47.116082Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:12:47.120278Z","iopub.execute_input":"2024-08-13T16:12:47.120735Z","iopub.status.idle":"2024-08-13T16:12:47.136876Z","shell.execute_reply.started":"2024-08-13T16:12:47.12068Z","shell.execute_reply":"2024-08-13T16:12:47.135756Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.preprocessing import LabelEncoder\n\nencoded_columns = ['airline', 'source_city', 'departure_time', 'arrival_time', 'destination_city']\nle = LabelEncoder()\n\nfor column in encoded_columns:\n    le.fit(df[column])\n    df[column] = le.transform(df[column])\n    print(f'Mapping for {column}:')\n    for cls, val in zip(le.classes_, le.transform(le.classes_)):\n        print(f'{cls}: {val}')\n    print()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:12:53.05481Z","iopub.execute_input":"2024-08-13T16:12:53.05523Z","iopub.status.idle":"2024-08-13T16:12:53.364065Z","shell.execute_reply.started":"2024-08-13T16:12:53.055197Z","shell.execute_reply":"2024-08-13T16:12:53.362778Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"df.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:13:10.895231Z","iopub.execute_input":"2024-08-13T16:13:10.895644Z","iopub.status.idle":"2024-08-13T16:13:10.911622Z","shell.execute_reply.started":"2024-08-13T16:13:10.89561Z","shell.execute_reply":"2024-08-13T16:13:10.91044Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":"**Regression Model for Predictions**","metadata":{}},{"cell_type":"code","source":"from sklearn.model_selection import train_test_split\nfrom sklearn.ensemble import RandomForestRegressor\n\nX = df.drop('price', axis = 1)\ny = df['price']","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:22:39.271708Z","iopub.execute_input":"2024-08-13T16:22:39.272153Z","iopub.status.idle":"2024-08-13T16:22:39.690127Z","shell.execute_reply.started":"2024-08-13T16:22:39.272118Z","shell.execute_reply":"2024-08-13T16:22:39.689174Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"X_train, X_test, y_train, y_test = train_test_split(X,y, test_size = 0.3)\nprint(\"X_train Shape: \", X_train.shape)\nprint(\"X_test Shape: \", X_test.shape)\nprint(\"y_train Shape: \", y_train.shape)\nprint(\"X_test Shape: \", y_test.shape)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:24:12.295002Z","iopub.execute_input":"2024-08-13T16:24:12.295447Z","iopub.status.idle":"2024-08-13T16:24:12.38374Z","shell.execute_reply.started":"2024-08-13T16:24:12.295416Z","shell.execute_reply":"2024-08-13T16:24:12.382559Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rf = RandomForestRegressor(n_jobs = 1)\nrf.fit(X_train, y_train)","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:28:37.24Z","iopub.execute_input":"2024-08-13T16:28:37.240465Z","iopub.status.idle":"2024-08-13T16:29:37.18632Z","shell.execute_reply.started":"2024-08-13T16:28:37.240425Z","shell.execute_reply":"2024-08-13T16:29:37.185255Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"rf.score(X_test,y_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:32:47.583359Z","iopub.execute_input":"2024-08-13T16:32:47.583781Z","iopub.status.idle":"2024-08-13T16:32:51.13391Z","shell.execute_reply.started":"2024-08-13T16:32:47.583747Z","shell.execute_reply":"2024-08-13T16:32:51.132657Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nimport math\n\ny_pred = rf.predict(X_test)\n\nprint('R2 Score: ', r2_score(y_test, y_pred))\nprint('MAE: ', mean_absolute_error(y_test, y_pred))\nprint('MSE: ', mean_squared_error(y_test, y_pred))\nprint('RMSE: ', math.sqrt(mean_squared_error(y_test, y_pred)))","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:38:12.133758Z","iopub.execute_input":"2024-08-13T16:38:12.134941Z","iopub.status.idle":"2024-08-13T16:38:15.686104Z","shell.execute_reply.started":"2024-08-13T16:38:12.134896Z","shell.execute_reply":"2024-08-13T16:38:15.684905Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.scatter(y_test, y_pred)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.title(\"Actual vs Predicted Price\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:39:51.636252Z","iopub.execute_input":"2024-08-13T16:39:51.636954Z","iopub.status.idle":"2024-08-13T16:39:52.12993Z","shell.execute_reply.started":"2024-08-13T16:39:51.636914Z","shell.execute_reply":"2024-08-13T16:39:52.128699Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"imp_features = dict(zip(rf.feature_names_in_, rf.feature_importances_))\nsorted_importances = sorted(imp_features.items(), key = lambda x: x[1], reverse = True)\n\nsorted_importances","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:44:21.326308Z","iopub.execute_input":"2024-08-13T16:44:21.326745Z","iopub.status.idle":"2024-08-13T16:44:21.486268Z","shell.execute_reply.started":"2024-08-13T16:44:21.326702Z","shell.execute_reply":"2024-08-13T16:44:21.485033Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.figure(figsize = (15,5))\nplt.bar([x[0] for x in sorted_importances[:10]], [x[1] for x in sorted_importances[:10]])","metadata":{"execution":{"iopub.status.busy":"2024-08-13T16:47:49.048452Z","iopub.execute_input":"2024-08-13T16:47:49.048852Z","iopub.status.idle":"2024-08-13T16:47:49.320045Z","shell.execute_reply.started":"2024-08-13T16:47:49.04882Z","shell.execute_reply":"2024-08-13T16:47:49.318863Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"#Methods for hyperparameter tuning\n'''\nfrom sklearn.model_selection import GridSearchCV\nreg = RandomForestRegressor(n_jobs = 1)\n\nparam_grid = {\n'n_estimators': [100,200,300],\n'max_depth': [10,20,30],                                               GRID_SEARCH_CV\n'min_samples_split' : [2,5,10],\n'min_samples_leaf': [1,2,4],\n'max_features': ['auto', 'sqrt']\n}\n\ng_search = GridSearchCV(reg, param_grid, cv = 5)\ng_search.fit(X_train, y_train)\n\nbest_params = g_search.best_params_\n'''\n\n#RandomizedSearchCV\n\nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\nparam_dist = {\n    'n_estimators': randint(100,300),\n    'max_depth': [10,20,30,40,50],\n    'min_samples_split' : randint(2,11),\n    'min_samples_leaf': randint(1,5),\n    'max_features': [1.0, 'auto', 'sqrt']\n}\n\nranf = RandomForestRegressor(n_jobs = 1)\n\nr_search = RandomizedSearchCV(estimator = ranf, param_distributions = param_dist, n_iter = 3, cv = 3,\n                              scoring = 'neg_mean_squared_error', verbose = 2, random_state = 10, n_jobs = 1)\n\nr_search.fit(X_train, y_train)\n\nbest_regressor = r_search.best_estimator_\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:03:50.199978Z","iopub.execute_input":"2024-08-13T17:03:50.200404Z","iopub.status.idle":"2024-08-13T17:16:40.115401Z","shell.execute_reply.started":"2024-08-13T17:03:50.20037Z","shell.execute_reply":"2024-08-13T17:16:40.114245Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"best_regressor.score(X_test, y_test)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:16:48.234903Z","iopub.execute_input":"2024-08-13T17:16:48.235261Z","iopub.status.idle":"2024-08-13T17:16:56.279096Z","shell.execute_reply.started":"2024-08-13T17:16:48.235228Z","shell.execute_reply":"2024-08-13T17:16:56.277709Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\nimport math\n\ny_pred = best_regressor.predict(X_test)\n\nprint('R2 Score: ', r2_score(y_test, y_pred))\nprint('MAE: ', mean_absolute_error(y_test, y_pred))\nprint('MSE: ', mean_squared_error(y_test, y_pred))\nprint('RMSE: ', math.sqrt(mean_squared_error(y_test, y_pred)))","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:17:04.293416Z","iopub.execute_input":"2024-08-13T17:17:04.293851Z","iopub.status.idle":"2024-08-13T17:17:12.249012Z","shell.execute_reply.started":"2024-08-13T17:17:04.293813Z","shell.execute_reply":"2024-08-13T17:17:12.247894Z"},"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"plt.scatter(y_test, y_pred)\nplt.xlabel(\"Actual Price\")\nplt.ylabel(\"Predicted Price\")\nplt.title(\"Actual vs Predicted Price\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-08-13T17:17:13.128304Z","iopub.execute_input":"2024-08-13T17:17:13.128609Z","iopub.status.idle":"2024-08-13T17:17:13.541008Z","shell.execute_reply.started":"2024-08-13T17:17:13.128582Z","shell.execute_reply":"2024-08-13T17:17:13.539748Z"},"trusted":true},"execution_count":null,"outputs":[]}]}